@page "/transfer"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using ServerBee.Data
@using ServerBee.Data.Models

@inject Services.DbHelperService DbHelperService
@inject ILogger<Transfer> Logger

@attribute [Authorize]

<main style="background-color: #e6fff2; min-height: 100vh; padding: 2rem; font-family: 'Segoe UI', sans-serif; color: #333;">
    <div style="display: flex; flex-direction: row; gap: 2rem;">

        <!-- Main Content -->
        <section style="flex: 1; display: flex; flex-direction: column; gap: 2rem;">

            <!-- Transfer Panel -->
            <div style="background: white; border-radius: 1rem; padding: 1.5rem; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                <h2 style="margin-top: 0; color: #084b37;"> Transfer</h2>

                <label for="from-account" style="font-weight: 500; margin-top: 1rem; display: block;">Source Account</label>
                <select id="from-account" @bind="fromAccount"
                        style="width: 100%; padding: 0.5rem; margin-top: 0.25rem; border-radius: 0.5rem; border: 1px solid #ccc; font-size: 1rem;">
                    @foreach (var acct in userAccounts)
                    {
                        <option value="@acct.AccountNumber">
                            @acct.AccountType – @acct.AccountNumber
                        </option>
                    }
                </select>
                
                <label for="to-account" style="font-weight: 500; margin-top: 1rem; display: block;">Destination Account</label>
                <input type="text" @bind="toAccount" id="to-account" list="ownedAccounts" placeholder="Account number..." maxlength="250">
                <datalist id="ownedAccounts">
                    @foreach (var acct in userAccounts)
                    {
                        <option value="@acct.AccountNumber">
                            @acct.AccountNumber - @acct.AccountType
                        </option>
                    }
                </datalist>

                <label for="memo" style="font-weight: 500; margin-top: 1rem; display: block;">Memo</label>
                <input type="text" id="memo" @bind="memo" placeholder="Enter a memo..."
                       style="width: 100%; padding: 0.5rem; margin-top: 0.25rem; border-radius: 0.5rem; border: 1px solid #ccc; font-size: 1rem;" />

                <label for="amount" style="font-weight: 500; margin-top: 1rem; display: block;">Amount</label>
                <input type="number" id="amount" @bind="amount" placeholder="0.00" step="0.01"
                       style="width: 100%; padding: 0.5rem; margin-top: 0.25rem; border-radius: 0.5rem; border: 1px solid #ccc; font-size: 1rem;" />

                <button @onclick="SendTransfer"
                        style="margin-top: 1.5rem; background-color: #2e7d6d; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 0.75rem; font-size: 1rem; font-weight: bold; cursor: pointer;">
                    Send Money
                </button>
                @* Status message *@
                @if (transferStatus is not null)
                {
                    <p style="margin-top: 1rem;
                              color: @(transferFailed ? "crimson" : "green");
                              font-weight: 500;">
                        @transferStatus
                    </p>
                }
            </div>

        </section>
        <!-- Recent Transactions Card -->
        <section style="background: white; border-radius: 1rem; padding: 1.5rem; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
            <h3 style="margin-top: 0; color: #084b37;">📋 Recent Transactions</h3>

            <ul style="list-style: none; padding-left: 0;">
                @if (recentTransactions != null)
                {
                    @foreach (var txn in recentTransactions)
                    {
                        <li style="margin-bottom: 0.75rem; font-size: 1.1rem;">
                            <span style="font-size: 1.3rem;">@GetEmoji(txn.TransactionType ?? "")</span>
                            <span style="margin-left: 0.5rem;">@txn.TransactionType to @txn.PayeePayerName</span> – 
                            <strong>@("S" + txn.Amount?.ToString("F2") ?? "$0.00")</strong>
                        </li>
                    }
                }
                else
                {
                    <li>Loading...</li>
                }
            </ul>
        </section>
    </div>
</main>

@code {
    private List<Account> userAccounts = new();
    private string fromAccount;
    private string toAccount;
    private string memo = string.Empty;
    private decimal amount = 0m;
    
    private List<Transaction>? recentTransactions;

    // Feedback fields
    private string? transferStatus;
    private bool transferFailed;

    protected override async Task OnInitializedAsync()
    {
        userAccounts = await DbHelperService.GetMoneyAccountsAsync();
        var transactions = await DbHelperService.GetTransactionHistoryAsync(10, 0) ?? new List<Transaction>();
        var timeCutOff = DateTime.Now.AddHours(-1);
        foreach (Transaction transaction in transactions)
        {
            if (transaction.Date is not null && transaction.Time is not null)
            {
                var dateTime = ((DateOnly)transaction.Date).ToDateTime((TimeOnly)transaction.Time);
                if (dateTime > timeCutOff)
                    recentTransactions!.Add(transaction);
            }
        }
        
    }

    private async Task SendTransfer()
    {
        // Block payments for zero or negative values 
        if (amount <= 0)
            return;

        // Shorten to fit in db
        if (memo.Length > 250)
            memo = memo.Substring(0,250);

        Logger.LogInformation($"Transferring {amount:C} from {fromAccount} to {toAccount} memo='{memo}'");

        if (await DbHelperService.IsAccountInSystem(toAccount))
            await DbHelperService.TransferInternalAsync(fromAccount, toAccount, amount, memo);
        else
            await DbHelperService.PayExternalAsync(fromAccount, amount, "EXTERNAL ACCOUNT", toAccount, memo);
    }

    private string GetEmoji(string? type) => (type ?? "").ToLower() switch
    {
        "deposit" => "💵",
        "withdraw" => "🏧",
        "transfer" => "🔁",
        "purchase" => "🛒",
        _ => "💸"
    };
}
