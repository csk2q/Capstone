@page "/"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="css/dashboard.css" />

<main class="dashboard-main">
    <!-- Top Header -->
    <div class="top-header">
        <div class="bank-logo" tabindex="0">🌿Direct Deposit Bank</div>
        <div class="user-profile" tabindex="0">
            <img src="https://via.placeholder.com/30" alt="User Image" class="profile-image" />
            <span class="user-name">@userName</span>
        </div>
    </div>
 
    <!-- Account Balance Card -->
    <section class="panel balance-panel" tabindex="0" @onkeydown="HandleSectionKeyDown" @ref="balanceSection" id="balance-section">
        <h2 class="panel-title">💳 Balance</h2>
        <div class="form-group">
            <label for="from-account" class="form-label">From Account</label>
            <select id="from-account" @bind="selectedAccount" @ref="accountSelect"
                    @onkeydown="HandleSelectKeyDown"
                    class="form-select @(focusedElement == "select" ? "focused" : "")">
                <option value="checking">Checking</option>
                <option value="savings">Savings</option>
            </select>
        </div>
        <ul class="balance-info">
            <li>Balance: <strong>@GetBalanceDisplay()</strong></li>
        </ul>
    </section>
    
    <!-- Recent Transactions Card -->
    <section class="panel transactions-panel" tabindex="0" @onkeydown="HandleSectionKeyDown" @ref="transactionsSection" id="transactions-section">
        <h3 class="panel-title">📋 Recent Transactions</h3>
        <ul class="transaction-list">
            @for (int i = 0; i < recentTransactions.Count; i++)
            {
                var txn = recentTransactions[i];
                var index = i;
                <li class="transaction-item @(focusedTransactionIndex == index ? "focused" : "")"
                    tabindex="@(focusedElement == "transactions" && focusedTransactionIndex == index ? 0 : -1)"
                    @ref="transactionRefs[i]"
                    @onkeydown="(e) => HandleTransactionKeyDown(e, index)"
                    @onclick="() => SelectTransaction(index)"
                    id="transaction-@index">
                    <span class="transaction-emoji">@txn.Emoji</span>
                    <span class="transaction-description">@txn.Description</span> –
                    <strong class="transaction-amount">@txn.Amount.ToString("C")</strong>
                </li>
            }
        </ul>
    </section>

    @if (showTransactionDetails && focusedTransactionIndex >= 0 && focusedTransactionIndex < recentTransactions.Count)
    {
        <div class="panel details-panel" @ref="detailsPanel" tabindex="0" @onkeydown="HandleDetailsKeyDown">
            <h3 class="panel-title">Transaction Details</h3>
            <p><strong>Type:</strong> @recentTransactions[focusedTransactionIndex].Emoji @recentTransactions[focusedTransactionIndex].Description</p>
            <p><strong>Amount:</strong> @recentTransactions[focusedTransactionIndex].Amount.ToString("C")</p>
            <p><strong>Date:</strong> April 10, 2025</p>
            <button @onclick="CloseTransactionDetails" class="btn-primary">
                Close
            </button>
        </div>
    }
</main>

@code {
    private string selectedAccount = "checking";
    private string userName = "User";
    private Dictionary<string, decimal> accountBalances = new()
    {
        { "checking", 135.00m },
        { "savings", 500.00m }
    };
    private List<Transaction> recentTransactions = new()
    {
        new Transaction("🛒", "Grocery", 135.00m),
        new Transaction("💵", "Deposit", 350.00m),
        new Transaction("🏧", "ATM Withdrawal", 18.00m)
    };
    
    // Keyboard navigation properties
    private ElementReference balanceSection;
    private ElementReference transactionsSection;
    private ElementReference accountSelect;
    private ElementReference detailsPanel;
    private ElementReference[] transactionRefs;
    private string focusedElement = "";
    private int focusedTransactionIndex = -1;
    private bool showTransactionDetails = false;
    
    protected override void OnInitialized()
    {
        transactionRefs = new ElementReference[recentTransactions.Count];
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set initial focus to the balance section
            await balanceSection.FocusAsync();
            focusedElement = "balance";
        }
    }
    
    private string GetBalanceDisplay()
    {
        if (accountBalances.TryGetValue(selectedAccount, out var balance))
        {
            return balance.ToString("C");
        }
        return "$0.00";
    }
    
    private record Transaction(string Emoji, string Description, decimal Amount);
    
    private async Task HandleSectionKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Tab":
                // Tab is handled by the browser
                break;
                
            case "ArrowDown":
                if (focusedElement == "balance")
                {
                    // Move focus to the account select dropdown
                    focusedElement = "select";
                    await accountSelect.FocusAsync();
                }
                else if (focusedElement == "transactions")
                {
                    // Move focus to the first transaction if not already focused
                    if (focusedTransactionIndex == -1 && recentTransactions.Count > 0)
                    {
                        await SelectTransaction(0);
                    }
                }
                break;
                
            case "Enter":
            case " ": // Space key
                if (focusedElement == "balance")
                {
                    // Focus the select dropdown when Enter is pressed on balance section
                    focusedElement = "select";
                    await accountSelect.FocusAsync();
                }
                else if (focusedElement == "transactions" && recentTransactions.Count > 0)
                {
                    // Select the first transaction if none is selected
                    if (focusedTransactionIndex == -1)
                    {
                        await SelectTransaction(0);
                    }
                }
                break;
        }
    }
    
    private async Task HandleSelectKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Tab":
                // Tab is handled by the browser
                break;
                
            case "Escape":
                // Return focus to the balance section
                focusedElement = "balance";
                await balanceSection.FocusAsync();
                break;
                
            case "ArrowDown":
                if (!e.AltKey)
                {
                    // Let the default dropdown behavior handle this
                    break;
                }
                // If Alt+ArrowDown, open the dropdown (default browser behavior)
                break;
                
            case "ArrowUp":
                // Move focus back to balance section
                focusedElement = "balance";
                await balanceSection.FocusAsync();
                break;
        }
    }
    
    private async Task HandleTransactionKeyDown(KeyboardEventArgs e, int index)
    {
        switch (e.Key)
        {
            case "ArrowDown":
                if (index < recentTransactions.Count - 1)
                {
                    await SelectTransaction(index + 1);
                }
                break;
                
            case "ArrowUp":
                if (index > 0)
                {
                    await SelectTransaction(index - 1);
                }
                else
                {
                    // Move focus back to transactions section
                    focusedElement = "transactions";
                    focusedTransactionIndex = -1;
                    await transactionsSection.FocusAsync();
                }
                break;
                
            case "Enter":
            case " ": // Space key
                // Show transaction details
                focusedTransactionIndex = index;
                showTransactionDetails = true;
                StateHasChanged();
                
                // Focus the details panel
                await Task.Delay(10); // Small delay to ensure element is rendered
                await detailsPanel.FocusAsync();
                break;
                
            case "Escape":
                // Move focus back to transactions section
                focusedElement = "transactions";
                focusedTransactionIndex = -1;
                await transactionsSection.FocusAsync();
                break;
        }
    }
    
    private async Task HandleDetailsKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            CloseTransactionDetails();
            await Task.Delay(10); // Small delay to ensure UI is updated
            
            // Return focus to the transaction that was selected
            if (focusedTransactionIndex >= 0 && focusedTransactionIndex < recentTransactions.Count)
            {
                await transactionRefs[focusedTransactionIndex].FocusAsync();
            }
        }
    }
    
    private async Task SelectTransaction(int index)
    {
        focusedElement = "transactions";
        focusedTransactionIndex = index;
        StateHasChanged();
        
        // Focus the selected transaction
        await transactionRefs[index].FocusAsync();
    }
    
    private void CloseTransactionDetails()
    {
        showTransactionDetails = false;
    }
}
