@page "/Accounts"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@using ServerBee.Data.Models
@using System.ComponentModel.DataAnnotations


@attribute [Authorize]

@inject ServerBee.Services.DbHelperService DbHelperService


<main style="background-color: #e6fff2; min-height: 100vh; padding: 2rem; font-family: 'Segoe UI', sans-serif; color: #333;">
    <h1 style="color: #084b37; margin-bottom: 1.5rem;">🏦 My Accounts</h1>

    <section style="display: flex; flex-wrap: wrap; gap: 2rem;">
        @if (userAccounts.Any())
        {
            @foreach (var acct in userAccounts)
            {
                <div style="background: white; border-radius: 1rem; padding: 1.5rem; width: 280px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); transition: transform 0.2s ease; cursor: pointer;">
                    <h2 style="margin: 0; color: #084b37;">@acct.AccountType</h2>
                    <p style="margin: 0.5rem 0;">Account #: @acct.AccountNumber</p>
                     <p style="font-size: 1.2rem; font-weight: bold;"> Balance: @($"${(acct.CurrentBalance ?? 0m):F2}")</p>
                </div>
            }
        }
        else
        {
            <p style="font-size: 1.1rem; color: #555;">You do not have an account with us yet, set up an account today!</p>
        }
    </section>

     <!-- Create + Delete cards side by side -->
    <section style="display: flex; gap: 2rem; margin-top: 3rem; flex-wrap: wrap; justify-content: center;">

        <!-- Create Account Card -->
        <div style="background: white; border-radius: 1rem; padding: 1.5rem; box-shadow: 0 4px 12px rgba(0,0,0,0.1); width: 300px;">
            <h2 style="margin-top: 0; color: #084b37;">Create New Account</h2>

            <EditForm Model="createModel" OnValidSubmit="HandleCreate">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label for="typeSelect">Account Type</label>
                    <InputSelect id="typeSelect"
                                 @bind-Value="createModel.AccountType"
                                 class="form-control">
                        <option value="">-- select --</option>
                        <option value="Checking">Checking</option>
                        <option value="Savings">Savings</option>
                    </InputSelect>
                </div>

                <div class="form-group mb-3">
                    <label for="openingBalance">Opening Balance</label>
                    <InputNumber id="openingBalance"
                                 @bind-Value="createModel.OpeningBalance"
                                 class="form-control"
                                 min="0"
                                 step="0.01" />
                </div>

                <button type="submit"
                        class="btn btn-primary"
                        disabled="@(string.IsNullOrEmpty(createModel.AccountType))">
                    Create Account
                </button>
            </EditForm>

            @if (createFeedback is not null)
            {
                <div class="mt-3 alert @createFeedbackClass">@createFeedback</div>
            }
        </div>

        <!-- Delete Account Card -->
        <div style="background: white; border-radius: 1rem; padding: 1.5rem; box-shadow: 0 4px 12px rgba(0,0,0,0.1); width: 300px;">
            <h2 style="margin-top: 0; color: #084b37;">Delete an Account</h2>

            @if (userAccounts.Any())
            {
                <EditForm Model="deleteModel" OnValidSubmit="HandleDelete">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="deleteSelect">Choose an account</label>
                        <InputSelect id="deleteSelect"
                                     @bind-Value="deleteModel.AccountNumber"
                                     class="form-control">
                            <option value="">-- select --</option>
                            @foreach (var acct in userAccounts)
                            {
                                <option value="@acct.AccountNumber">
                                    @acct.AccountNumber (@($"${(acct.CurrentBalance ?? 0m):F2}"))
                                </option>
                            }
                        </InputSelect>
                    </div>

                    <button type="submit"
                            class="btn btn-danger"
                            disabled="@(string.IsNullOrEmpty(deleteModel.AccountNumber))">
                        Delete Account
                    </button>
                </EditForm>

                @if (feedback is not null)
                {
                    <div class="mt-3 alert @feedbackClass">@feedback</div>
                }
            }
            else
            {
                <p style="font-size: 1rem; color: #555;">No linked accounts available to delete.</p>
            }
        </div>
    </section>
</main>

@code {
    private List<Account> userAccounts = new();

    //–– Create form state
    private CreateModel createModel = new();
    private string? createFeedback;
    private string? createFeedbackClass;

    private async Task HandleCreate(EditContext _)
    {
        try
        {
            // uses your existing signature: returns the new account number
            var newAccountNumber = await DbHelperService.CreateAccountAsync(
                createModel.AccountType!,
                createModel.OpeningBalance
            );

            // refresh and show success
            userAccounts = await DbHelperService.GetMoneyAccountsAsync();
            createFeedback = $"Created {createModel.AccountType} account #{newAccountNumber}";
            createFeedbackClass = "alert-success";

            createModel = new CreateModel();
        }
        catch (Exception ex)
        {
            createFeedback = $"Failed to create account: {ex.Message}";
            createFeedbackClass = "alert-danger";
        }
    }

    private class CreateModel
    {
        [Required(ErrorMessage = "Please select an account type")]
        public string? AccountType { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Opening balance must be non-negative")]
        public decimal OpeningBalance { get; set; }
    }

    //–– Delete form state
    private DeleteModel deleteModel = new();
    private string? feedback;
    private string? feedbackClass;

    private async Task HandleDelete(EditContext _)
    {
        var ok = await DbHelperService.RemoveAccountAsync(deleteModel.AccountNumber!);
        if (ok)
        {
            userAccounts = await DbHelperService.GetMoneyAccountsAsync();
            feedback = $"Account {deleteModel.AccountNumber} deleted successfully.";
            feedbackClass = "alert-success";
            deleteModel = new DeleteModel();
        }
        else
        {
            feedback = $"Failed to delete account {deleteModel.AccountNumber}.";
            feedbackClass = "alert-danger";
        }
    }

    private class DeleteModel
    {
        [Required(ErrorMessage = "Please select an account")]
        public string? AccountNumber { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        userAccounts = await DbHelperService.GetMoneyAccountsAsync();
    }
}